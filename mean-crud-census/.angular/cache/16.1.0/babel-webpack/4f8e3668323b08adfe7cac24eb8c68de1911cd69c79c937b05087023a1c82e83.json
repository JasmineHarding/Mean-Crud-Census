{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // Node/Express API\n    this.REST_API = 'http://localhost:8000/api';\n    // Http Header\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  // Get all census\n  GetCensuses() {\n    return this.httpClient.get(`${this.REST_API}`);\n  }\n  // Get a single census\n  GetCensus(id) {\n    let API_URL = `${this.REST_API}/read-census/${id}`;\n    return this.httpClient.get(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  // Update\n  updateCensus(id, data) {\n    let API_URL = `${this.REST_API}/update-census/${id}`;\n    return this.httpClient.put(API_URL, data, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  //Add\n  AddCensus(data) {\n    let API_URL = `${this.REST_API}/add-census`;\n    return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n  }\n  // Delete\n  deleteCensus(id) {\n    let API_URL = `${this.REST_API}/delete-census/${id}`;\n    return this.httpClient.delete(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  // Error \n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Handle client error\n      errorMessage = error.error.message;\n    } else {\n      // Handle server error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","map","throwError","HttpHeaders","CrudService","constructor","httpClient","REST_API","httpHeaders","set","GetCensuses","get","GetCensus","id","API_URL","headers","pipe","res","handleError","updateCensus","data","put","AddCensus","post","deleteCensus","delete","error","errorMessage","ErrorEvent","message","status","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\chops\\OneDrive\\Desktop\\CIS360\\Week 5\\FinalExam\\mean-crud-census\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Census } from './census';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n \r\nexport class CrudService {\r\n \r\n  // Node/Express API\r\n  REST_API: string = 'http://localhost:8000/api';\r\n \r\n  // Http Header\r\n  httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\r\n \r\n  constructor(private httpClient: HttpClient) { }\r\n \r\n  // Get all census\r\n  GetCensuses() {\r\n    return this.httpClient.get(`${this.REST_API}`);\r\n  }\r\n \r\n    // Get a single census\r\n    GetCensus(id: any): Observable<any> {\r\n      let API_URL = `${this.REST_API}/read-census/${id}`;\r\n      return this.httpClient.get(API_URL, { headers: this.httpHeaders })\r\n        .pipe(map((res: any) => {\r\n          return res || {}\r\n        }),\r\n          catchError(this.handleError)\r\n        )\r\n    }\r\n  \r\n    // Update\r\n    updateCensus(id: any, data: any): Observable<any> {\r\n      let API_URL = `${this.REST_API}/update-census/${id}`;\r\n      return this.httpClient.put(API_URL, data, { headers: this.httpHeaders })\r\n        .pipe(\r\n          catchError(this.handleError)\r\n        )\r\n    }\r\n\r\n      //Add\r\n  AddCensus(data:Census): Observable<any> {\r\n    let API_URL = `${this.REST_API}/add-census`;\r\n    return this.httpClient.post(API_URL, data)\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    )\r\n  }\r\n\r\n  // Delete\r\ndeleteCensus(id: any): Observable<any> {\r\n  let API_URL = `${this.REST_API}/delete-census/${id}`;\r\n  return this.httpClient.delete(API_URL, { headers: this.httpHeaders })\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    )\r\n}\r\n\r\n\r\n  // Error \r\n  handleError(error: HttpErrorResponse) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Handle client error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Handle server error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.log(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAAqBC,WAAW,QAA2B,sBAAsB;;;AAMjF,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAN9B;IACA,KAAAC,QAAQ,GAAW,2BAA2B;IAE9C;IACA,KAAAC,WAAW,GAAG,IAAIL,WAAW,EAAE,CAACM,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAEzB;EAE9C;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAC,GAAG,IAAI,CAACJ,QAAQ,EAAE,CAAC;EAChD;EAEE;EACAK,SAASA,CAACC,EAAO;IACf,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACP,QAAQ,gBAAgBM,EAAE,EAAE;IAClD,OAAO,IAAI,CAACP,UAAU,CAACK,GAAG,CAACG,OAAO,EAAE;MAAEC,OAAO,EAAE,IAAI,CAACP;IAAW,CAAE,CAAC,CAC/DQ,IAAI,CAACf,GAAG,CAAEgB,GAAQ,IAAI;MACrB,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EACAjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACL;EAEA;EACAC,YAAYA,CAACN,EAAO,EAAEO,IAAS;IAC7B,IAAIN,OAAO,GAAG,GAAG,IAAI,CAACP,QAAQ,kBAAkBM,EAAE,EAAE;IACpD,OAAO,IAAI,CAACP,UAAU,CAACe,GAAG,CAACP,OAAO,EAAEM,IAAI,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACP;IAAW,CAAE,CAAC,CACrEQ,IAAI,CACHhB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACL;EAEE;EACJI,SAASA,CAACF,IAAW;IACnB,IAAIN,OAAO,GAAG,GAAG,IAAI,CAACP,QAAQ,aAAa;IAC3C,OAAO,IAAI,CAACD,UAAU,CAACiB,IAAI,CAACT,OAAO,EAAEM,IAAI,CAAC,CACzCJ,IAAI,CACHhB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACH;EAEA;EACFM,YAAYA,CAACX,EAAO;IAClB,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACP,QAAQ,kBAAkBM,EAAE,EAAE;IACpD,OAAO,IAAI,CAACP,UAAU,CAACmB,MAAM,CAACX,OAAO,EAAE;MAAEC,OAAO,EAAE,IAAI,CAACP;IAAW,CAAE,CAAC,CAClEQ,IAAI,CACHhB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACL;EAGE;EACAA,WAAWA,CAACQ,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOzB,UAAU,CAACyB,YAAY,CAAC;EACjC;EAAC,QAAAM,CAAA,G;qBAlEU7B,WAAW,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlC,WAAW;IAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;IAAAC,UAAA,EAHV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}